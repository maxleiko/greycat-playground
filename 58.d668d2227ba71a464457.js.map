{"version":3,"sources":["webpack:////home/leiko/dev/datathings/greycat/js/node_modules/vscode-languageserver-types/lib/esm/main.js"],"names":["Position","Range","Location","Color","ColorInformation","ColorPresentation","FoldingRangeKind","FoldingRange","DiagnosticRelatedInformation","DiagnosticSeverity","Diagnostic","Command","TextEdit","TextDocumentEdit","CreateFile","RenameFile","DeleteFile","WorkspaceEdit","__webpack_require__","d","__webpack_exports__","CompletionItemKind","InsertTextFormat","TextDocument","create","line","character","is","value","candidate","Is","objectLiteral","number","one","two","three","four","start","end","Error","uri","range","defined","string","undefined","red","green","blue","alpha","color","label","textEdit","additionalTextEdits","typedArray","startLine","endLine","startCharacter","endCharacter","kind","result","location","message","Warning","Information","Hint","severity","code","source","relatedInformation","title","command","args","_i","arguments","length","replace","newText","insert","position","del","textDocument","edits","VersionedTextDocumentIdentifier","Array","isArray","options","overwrite","ignoreIfExists","boolean","oldUri","newUri","recursive","ignoreIfNotExists","changes","documentChanges","every","change","TextDocumentIdentifier","TextDocumentItem","MarkupKind","MarkupContent","CompletionItem","CompletionList","MarkedString","Hover","ParameterInformation","SignatureInformation","DocumentHighlightKind","DocumentHighlight","SymbolKind","SymbolInformation","TextEditChangeImpl","this","prototype","push","delete","add","edit","all","clear","splice","WorkspaceChange","workspaceEdit","_this","_textEditChanges","Object","_workspaceEdit","forEach","textEditChange","keys","key","defineProperty","get","enumerable","configurable","getTextEditChange","textDocumentEdit","createFile","checkDocumentChanges","renameFile","deleteFile","version","languageId","text","PlainText","Markdown","Text","Method","Function","Constructor","Field","Variable","Class","Interface","Module","Property","Unit","Value","Enum","Keyword","Snippet","File","Reference","Folder","EnumMember","Constant","Struct","Event","Operator","TypeParameter","items","isIncomplete","fromPlainText","plainText","language","contents","documentation","parameters","Read","Write","Namespace","Package","String","Number","Boolean","Key","Null","name","containerName","CodeActionKind","CodeActionContext","CodeAction","CodeLens","FormattingOptions","DocumentSymbol","detail","selectionRange","children","deprecated","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","diagnostics","only","commandOrEdit","data","tabSize","insertSpaces","DocumentLink","target","TextDocumentSaveReason","content","FullTextDocument","lineCount","func","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","mergeSort","compare","p","left","slice","right","leftIdx","rightIdx","i","ret","a","b","diff","lastModifiedOffset","e","startOffset","endOffset","substring","Manual","AfterDelay","FocusOut","_uri","_languageId","_version","_content","_lineOffsets","update","event","getLineOffsets","lineOffsets","isLineStart","ch","charAt","offset","Math","max","min","low","high","mid","floor","lineOffset","nextLineOffset","toString","call","check"],"mappings":"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","file":"58.d668d2227ba71a464457.js","sourcesContent":["/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n'use strict';\r\n/**\r\n * The Position namespace provides helper functions to work with\r\n * [Position](#Position) literals.\r\n */\r\nexport var Position;\r\n(function (Position) {\r\n    /**\r\n     * Creates a new Position literal from the given line and character.\r\n     * @param line The position's line.\r\n     * @param character The position's character.\r\n     */\r\n    function create(line, character) {\r\n        return { line: line, character: character };\r\n    }\r\n    Position.create = create;\r\n    /**\r\n     * Checks whether the given liternal conforms to the [Position](#Position) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate) && Is.number(candidate.line) && Is.number(candidate.character);\r\n    }\r\n    Position.is = is;\r\n})(Position || (Position = {}));\r\n/**\r\n * The Range namespace provides helper functions to work with\r\n * [Range](#Range) literals.\r\n */\r\nexport var Range;\r\n(function (Range) {\r\n    function create(one, two, three, four) {\r\n        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {\r\n            return { start: Position.create(one, two), end: Position.create(three, four) };\r\n        }\r\n        else if (Position.is(one) && Position.is(two)) {\r\n            return { start: one, end: two };\r\n        }\r\n        else {\r\n            throw new Error(\"Range#create called with invalid arguments[\" + one + \", \" + two + \", \" + three + \", \" + four + \"]\");\r\n        }\r\n    }\r\n    Range.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Range](#Range) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\r\n    }\r\n    Range.is = is;\r\n})(Range || (Range = {}));\r\n/**\r\n * The Location namespace provides helper functions to work with\r\n * [Location](#Location) literals.\r\n */\r\nexport var Location;\r\n(function (Location) {\r\n    /**\r\n     * Creates a Location literal.\r\n     * @param uri The location's uri.\r\n     * @param range The location's range.\r\n     */\r\n    function create(uri, range) {\r\n        return { uri: uri, range: range };\r\n    }\r\n    Location.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Location](#Location) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\r\n    }\r\n    Location.is = is;\r\n})(Location || (Location = {}));\r\n/**\r\n * The Color namespace provides helper functions to work with\r\n * [Color](#Color) literals.\r\n */\r\nexport var Color;\r\n(function (Color) {\r\n    /**\r\n     * Creates a new Color literal.\r\n     */\r\n    function create(red, green, blue, alpha) {\r\n        return {\r\n            red: red,\r\n            green: green,\r\n            blue: blue,\r\n            alpha: alpha,\r\n        };\r\n    }\r\n    Color.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Color](#Color) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.number(candidate.red)\r\n            && Is.number(candidate.green)\r\n            && Is.number(candidate.blue)\r\n            && Is.number(candidate.alpha);\r\n    }\r\n    Color.is = is;\r\n})(Color || (Color = {}));\r\n/**\r\n * The ColorInformation namespace provides helper functions to work with\r\n * [ColorInformation](#ColorInformation) literals.\r\n */\r\nexport var ColorInformation;\r\n(function (ColorInformation) {\r\n    /**\r\n     * Creates a new ColorInformation literal.\r\n     */\r\n    function create(range, color) {\r\n        return {\r\n            range: range,\r\n            color: color,\r\n        };\r\n    }\r\n    ColorInformation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Range.is(candidate.range) && Color.is(candidate.color);\r\n    }\r\n    ColorInformation.is = is;\r\n})(ColorInformation || (ColorInformation = {}));\r\n/**\r\n * The Color namespace provides helper functions to work with\r\n * [ColorPresentation](#ColorPresentation) literals.\r\n */\r\nexport var ColorPresentation;\r\n(function (ColorPresentation) {\r\n    /**\r\n     * Creates a new ColorInformation literal.\r\n     */\r\n    function create(label, textEdit, additionalTextEdits) {\r\n        return {\r\n            label: label,\r\n            textEdit: textEdit,\r\n            additionalTextEdits: additionalTextEdits,\r\n        };\r\n    }\r\n    ColorPresentation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.string(candidate.label)\r\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\r\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\r\n    }\r\n    ColorPresentation.is = is;\r\n})(ColorPresentation || (ColorPresentation = {}));\r\n/**\r\n * Enum of known range kinds\r\n */\r\nexport var FoldingRangeKind;\r\n(function (FoldingRangeKind) {\r\n    /**\r\n     * Folding range for a comment\r\n     */\r\n    FoldingRangeKind[\"Comment\"] = \"comment\";\r\n    /**\r\n     * Folding range for a imports or includes\r\n     */\r\n    FoldingRangeKind[\"Imports\"] = \"imports\";\r\n    /**\r\n     * Folding range for a region (e.g. `#region`)\r\n     */\r\n    FoldingRangeKind[\"Region\"] = \"region\";\r\n})(FoldingRangeKind || (FoldingRangeKind = {}));\r\n/**\r\n * The folding range namespace provides helper functions to work with\r\n * [FoldingRange](#FoldingRange) literals.\r\n */\r\nexport var FoldingRange;\r\n(function (FoldingRange) {\r\n    /**\r\n     * Creates a new FoldingRange literal.\r\n     */\r\n    function create(startLine, endLine, startCharacter, endCharacter, kind) {\r\n        var result = {\r\n            startLine: startLine,\r\n            endLine: endLine\r\n        };\r\n        if (Is.defined(startCharacter)) {\r\n            result.startCharacter = startCharacter;\r\n        }\r\n        if (Is.defined(endCharacter)) {\r\n            result.endCharacter = endCharacter;\r\n        }\r\n        if (Is.defined(kind)) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    FoldingRange.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [FoldingRange](#FoldingRange) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.number(candidate.startLine) && Is.number(candidate.startLine)\r\n            && (Is.undefined(candidate.startCharacter) || Is.number(candidate.startCharacter))\r\n            && (Is.undefined(candidate.endCharacter) || Is.number(candidate.endCharacter))\r\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\r\n    }\r\n    FoldingRange.is = is;\r\n})(FoldingRange || (FoldingRange = {}));\r\n/**\r\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\r\n * [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.\r\n */\r\nexport var DiagnosticRelatedInformation;\r\n(function (DiagnosticRelatedInformation) {\r\n    /**\r\n     * Creates a new DiagnosticRelatedInformation literal.\r\n     */\r\n    function create(location, message) {\r\n        return {\r\n            location: location,\r\n            message: message\r\n        };\r\n    }\r\n    DiagnosticRelatedInformation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\r\n    }\r\n    DiagnosticRelatedInformation.is = is;\r\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\r\n/**\r\n * The diagnostic's severity.\r\n */\r\nexport var DiagnosticSeverity;\r\n(function (DiagnosticSeverity) {\r\n    /**\r\n     * Reports an error.\r\n     */\r\n    DiagnosticSeverity.Error = 1;\r\n    /**\r\n     * Reports a warning.\r\n     */\r\n    DiagnosticSeverity.Warning = 2;\r\n    /**\r\n     * Reports an information.\r\n     */\r\n    DiagnosticSeverity.Information = 3;\r\n    /**\r\n     * Reports a hint.\r\n     */\r\n    DiagnosticSeverity.Hint = 4;\r\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\r\n/**\r\n * The Diagnostic namespace provides helper functions to work with\r\n * [Diagnostic](#Diagnostic) literals.\r\n */\r\nexport var Diagnostic;\r\n(function (Diagnostic) {\r\n    /**\r\n     * Creates a new Diagnostic literal.\r\n     */\r\n    function create(range, message, severity, code, source, relatedInformation) {\r\n        var result = { range: range, message: message };\r\n        if (Is.defined(severity)) {\r\n            result.severity = severity;\r\n        }\r\n        if (Is.defined(code)) {\r\n            result.code = code;\r\n        }\r\n        if (Is.defined(source)) {\r\n            result.source = source;\r\n        }\r\n        if (Is.defined(relatedInformation)) {\r\n            result.relatedInformation = relatedInformation;\r\n        }\r\n        return result;\r\n    }\r\n    Diagnostic.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate)\r\n            && Range.is(candidate.range)\r\n            && Is.string(candidate.message)\r\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\r\n            && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\r\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\r\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\r\n    }\r\n    Diagnostic.is = is;\r\n})(Diagnostic || (Diagnostic = {}));\r\n/**\r\n * The Command namespace provides helper functions to work with\r\n * [Command](#Command) literals.\r\n */\r\nexport var Command;\r\n(function (Command) {\r\n    /**\r\n     * Creates a new Command literal.\r\n     */\r\n    function create(title, command) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        var result = { title: title, command: command };\r\n        if (Is.defined(args) && args.length > 0) {\r\n            result.arguments = args;\r\n        }\r\n        return result;\r\n    }\r\n    Command.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Command](#Command) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\r\n    }\r\n    Command.is = is;\r\n})(Command || (Command = {}));\r\n/**\r\n * The TextEdit namespace provides helper function to create replace,\r\n * insert and delete edits more easily.\r\n */\r\nexport var TextEdit;\r\n(function (TextEdit) {\r\n    /**\r\n     * Creates a replace text edit.\r\n     * @param range The range of text to be replaced.\r\n     * @param newText The new text.\r\n     */\r\n    function replace(range, newText) {\r\n        return { range: range, newText: newText };\r\n    }\r\n    TextEdit.replace = replace;\r\n    /**\r\n     * Creates a insert text edit.\r\n     * @param position The position to insert the text at.\r\n     * @param newText The text to be inserted.\r\n     */\r\n    function insert(position, newText) {\r\n        return { range: { start: position, end: position }, newText: newText };\r\n    }\r\n    TextEdit.insert = insert;\r\n    /**\r\n     * Creates a delete text edit.\r\n     * @param range The range of text to be deleted.\r\n     */\r\n    function del(range) {\r\n        return { range: range, newText: '' };\r\n    }\r\n    TextEdit.del = del;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate)\r\n            && Is.string(candidate.newText)\r\n            && Range.is(candidate.range);\r\n    }\r\n    TextEdit.is = is;\r\n})(TextEdit || (TextEdit = {}));\r\n/**\r\n * The TextDocumentEdit namespace provides helper function to create\r\n * an edit that manipulates a text document.\r\n */\r\nexport var TextDocumentEdit;\r\n(function (TextDocumentEdit) {\r\n    /**\r\n     * Creates a new `TextDocumentEdit`\r\n     */\r\n    function create(textDocument, edits) {\r\n        return { textDocument: textDocument, edits: edits };\r\n    }\r\n    TextDocumentEdit.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate)\r\n            && VersionedTextDocumentIdentifier.is(candidate.textDocument)\r\n            && Array.isArray(candidate.edits);\r\n    }\r\n    TextDocumentEdit.is = is;\r\n})(TextDocumentEdit || (TextDocumentEdit = {}));\r\nexport var CreateFile;\r\n(function (CreateFile) {\r\n    function create(uri, options) {\r\n        var result = {\r\n            kind: 'create',\r\n            uri: uri\r\n        };\r\n        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {\r\n            result.options = options;\r\n        }\r\n        return result;\r\n    }\r\n    CreateFile.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) &&\r\n            (candidate.options === void 0 ||\r\n                ((candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))));\r\n    }\r\n    CreateFile.is = is;\r\n})(CreateFile || (CreateFile = {}));\r\nexport var RenameFile;\r\n(function (RenameFile) {\r\n    function create(oldUri, newUri, options) {\r\n        var result = {\r\n            kind: 'rename',\r\n            oldUri: oldUri,\r\n            newUri: newUri\r\n        };\r\n        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {\r\n            result.options = options;\r\n        }\r\n        return result;\r\n    }\r\n    RenameFile.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) &&\r\n            (candidate.options === void 0 ||\r\n                ((candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))));\r\n    }\r\n    RenameFile.is = is;\r\n})(RenameFile || (RenameFile = {}));\r\nexport var DeleteFile;\r\n(function (DeleteFile) {\r\n    function create(uri, options) {\r\n        var result = {\r\n            kind: 'delete',\r\n            uri: uri\r\n        };\r\n        if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {\r\n            result.options = options;\r\n        }\r\n        return result;\r\n    }\r\n    DeleteFile.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) &&\r\n            (candidate.options === void 0 ||\r\n                ((candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists))));\r\n    }\r\n    DeleteFile.is = is;\r\n})(DeleteFile || (DeleteFile = {}));\r\nexport var WorkspaceEdit;\r\n(function (WorkspaceEdit) {\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate &&\r\n            (candidate.changes !== void 0 || candidate.documentChanges !== void 0) &&\r\n            (candidate.documentChanges === void 0 || candidate.documentChanges.every(function (change) {\r\n                if (Is.string(change.kind)) {\r\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\r\n                }\r\n                else {\r\n                    return TextDocumentEdit.is(change);\r\n                }\r\n            }));\r\n    }\r\n    WorkspaceEdit.is = is;\r\n})(WorkspaceEdit || (WorkspaceEdit = {}));\r\nvar TextEditChangeImpl = /** @class */ (function () {\r\n    function TextEditChangeImpl(edits) {\r\n        this.edits = edits;\r\n    }\r\n    TextEditChangeImpl.prototype.insert = function (position, newText) {\r\n        this.edits.push(TextEdit.insert(position, newText));\r\n    };\r\n    TextEditChangeImpl.prototype.replace = function (range, newText) {\r\n        this.edits.push(TextEdit.replace(range, newText));\r\n    };\r\n    TextEditChangeImpl.prototype.delete = function (range) {\r\n        this.edits.push(TextEdit.del(range));\r\n    };\r\n    TextEditChangeImpl.prototype.add = function (edit) {\r\n        this.edits.push(edit);\r\n    };\r\n    TextEditChangeImpl.prototype.all = function () {\r\n        return this.edits;\r\n    };\r\n    TextEditChangeImpl.prototype.clear = function () {\r\n        this.edits.splice(0, this.edits.length);\r\n    };\r\n    return TextEditChangeImpl;\r\n}());\r\n/**\r\n * A workspace change helps constructing changes to a workspace.\r\n */\r\nvar WorkspaceChange = /** @class */ (function () {\r\n    function WorkspaceChange(workspaceEdit) {\r\n        var _this = this;\r\n        this._textEditChanges = Object.create(null);\r\n        if (workspaceEdit) {\r\n            this._workspaceEdit = workspaceEdit;\r\n            if (workspaceEdit.documentChanges) {\r\n                workspaceEdit.documentChanges.forEach(function (change) {\r\n                    if (TextDocumentEdit.is(change)) {\r\n                        var textEditChange = new TextEditChangeImpl(change.edits);\r\n                        _this._textEditChanges[change.textDocument.uri] = textEditChange;\r\n                    }\r\n                });\r\n            }\r\n            else if (workspaceEdit.changes) {\r\n                Object.keys(workspaceEdit.changes).forEach(function (key) {\r\n                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\r\n                    _this._textEditChanges[key] = textEditChange;\r\n                });\r\n            }\r\n        }\r\n    }\r\n    Object.defineProperty(WorkspaceChange.prototype, \"edit\", {\r\n        /**\r\n         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\r\n         * use to be returned from a workspace edit operation like rename.\r\n         */\r\n        get: function () {\r\n            return this._workspaceEdit;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    WorkspaceChange.prototype.getTextEditChange = function (key) {\r\n        if (VersionedTextDocumentIdentifier.is(key)) {\r\n            if (!this._workspaceEdit) {\r\n                this._workspaceEdit = {\r\n                    documentChanges: []\r\n                };\r\n            }\r\n            if (!this._workspaceEdit.documentChanges) {\r\n                throw new Error('Workspace edit is not configured for document changes.');\r\n            }\r\n            var textDocument = key;\r\n            var result = this._textEditChanges[textDocument.uri];\r\n            if (!result) {\r\n                var edits = [];\r\n                var textDocumentEdit = {\r\n                    textDocument: textDocument,\r\n                    edits: edits\r\n                };\r\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\r\n                result = new TextEditChangeImpl(edits);\r\n                this._textEditChanges[textDocument.uri] = result;\r\n            }\r\n            return result;\r\n        }\r\n        else {\r\n            if (!this._workspaceEdit) {\r\n                this._workspaceEdit = {\r\n                    changes: Object.create(null)\r\n                };\r\n            }\r\n            if (!this._workspaceEdit.changes) {\r\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\r\n            }\r\n            var result = this._textEditChanges[key];\r\n            if (!result) {\r\n                var edits = [];\r\n                this._workspaceEdit.changes[key] = edits;\r\n                result = new TextEditChangeImpl(edits);\r\n                this._textEditChanges[key] = result;\r\n            }\r\n            return result;\r\n        }\r\n    };\r\n    WorkspaceChange.prototype.createFile = function (uri, options) {\r\n        this.checkDocumentChanges();\r\n        this._workspaceEdit.documentChanges.push(CreateFile.create(uri, options));\r\n    };\r\n    WorkspaceChange.prototype.renameFile = function (oldUri, newUri, options) {\r\n        this.checkDocumentChanges();\r\n        this._workspaceEdit.documentChanges.push(RenameFile.create(oldUri, newUri, options));\r\n    };\r\n    WorkspaceChange.prototype.deleteFile = function (uri, options) {\r\n        this.checkDocumentChanges();\r\n        this._workspaceEdit.documentChanges.push(DeleteFile.create(uri, options));\r\n    };\r\n    WorkspaceChange.prototype.checkDocumentChanges = function () {\r\n        if (!this._workspaceEdit || !this._workspaceEdit.documentChanges) {\r\n            throw new Error('Workspace edit is not configured for document changes.');\r\n        }\r\n    };\r\n    return WorkspaceChange;\r\n}());\r\nexport { WorkspaceChange };\r\n/**\r\n * The TextDocumentIdentifier namespace provides helper functions to work with\r\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\r\n */\r\nexport var TextDocumentIdentifier;\r\n(function (TextDocumentIdentifier) {\r\n    /**\r\n     * Creates a new TextDocumentIdentifier literal.\r\n     * @param uri The document's uri.\r\n     */\r\n    function create(uri) {\r\n        return { uri: uri };\r\n    }\r\n    TextDocumentIdentifier.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri);\r\n    }\r\n    TextDocumentIdentifier.is = is;\r\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\r\n/**\r\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\r\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\r\n */\r\nexport var VersionedTextDocumentIdentifier;\r\n(function (VersionedTextDocumentIdentifier) {\r\n    /**\r\n     * Creates a new VersionedTextDocumentIdentifier literal.\r\n     * @param uri The document's uri.\r\n     * @param uri The document's text.\r\n     */\r\n    function create(uri, version) {\r\n        return { uri: uri, version: version };\r\n    }\r\n    VersionedTextDocumentIdentifier.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.number(candidate.version));\r\n    }\r\n    VersionedTextDocumentIdentifier.is = is;\r\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\r\n/**\r\n * The TextDocumentItem namespace provides helper functions to work with\r\n * [TextDocumentItem](#TextDocumentItem) literals.\r\n */\r\nexport var TextDocumentItem;\r\n(function (TextDocumentItem) {\r\n    /**\r\n     * Creates a new TextDocumentItem literal.\r\n     * @param uri The document's uri.\r\n     * @param languageId The document's language identifier.\r\n     * @param version The document's version number.\r\n     * @param text The document's text.\r\n     */\r\n    function create(uri, languageId, version, text) {\r\n        return { uri: uri, languageId: languageId, version: version, text: text };\r\n    }\r\n    TextDocumentItem.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);\r\n    }\r\n    TextDocumentItem.is = is;\r\n})(TextDocumentItem || (TextDocumentItem = {}));\r\n/**\r\n * Describes the content type that a client supports in various\r\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\r\n *\r\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\r\n * are reserved for internal usage.\r\n */\r\nexport var MarkupKind;\r\n(function (MarkupKind) {\r\n    /**\r\n     * Plain text is supported as a content format\r\n     */\r\n    MarkupKind.PlainText = 'plaintext';\r\n    /**\r\n     * Markdown is supported as a content format\r\n     */\r\n    MarkupKind.Markdown = 'markdown';\r\n})(MarkupKind || (MarkupKind = {}));\r\n(function (MarkupKind) {\r\n    /**\r\n     * Checks whether the given value is a value of the [MarkupKind](#MarkupKind) type.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\r\n    }\r\n    MarkupKind.is = is;\r\n})(MarkupKind || (MarkupKind = {}));\r\nexport var MarkupContent;\r\n(function (MarkupContent) {\r\n    /**\r\n     * Checks whether the given value conforms to the [MarkupContent](#MarkupContent) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\r\n    }\r\n    MarkupContent.is = is;\r\n})(MarkupContent || (MarkupContent = {}));\r\n/**\r\n * The kind of a completion entry.\r\n */\r\nexport var CompletionItemKind;\r\n(function (CompletionItemKind) {\r\n    CompletionItemKind.Text = 1;\r\n    CompletionItemKind.Method = 2;\r\n    CompletionItemKind.Function = 3;\r\n    CompletionItemKind.Constructor = 4;\r\n    CompletionItemKind.Field = 5;\r\n    CompletionItemKind.Variable = 6;\r\n    CompletionItemKind.Class = 7;\r\n    CompletionItemKind.Interface = 8;\r\n    CompletionItemKind.Module = 9;\r\n    CompletionItemKind.Property = 10;\r\n    CompletionItemKind.Unit = 11;\r\n    CompletionItemKind.Value = 12;\r\n    CompletionItemKind.Enum = 13;\r\n    CompletionItemKind.Keyword = 14;\r\n    CompletionItemKind.Snippet = 15;\r\n    CompletionItemKind.Color = 16;\r\n    CompletionItemKind.File = 17;\r\n    CompletionItemKind.Reference = 18;\r\n    CompletionItemKind.Folder = 19;\r\n    CompletionItemKind.EnumMember = 20;\r\n    CompletionItemKind.Constant = 21;\r\n    CompletionItemKind.Struct = 22;\r\n    CompletionItemKind.Event = 23;\r\n    CompletionItemKind.Operator = 24;\r\n    CompletionItemKind.TypeParameter = 25;\r\n})(CompletionItemKind || (CompletionItemKind = {}));\r\n/**\r\n * Defines whether the insert text in a completion item should be interpreted as\r\n * plain text or a snippet.\r\n */\r\nexport var InsertTextFormat;\r\n(function (InsertTextFormat) {\r\n    /**\r\n     * The primary text to be inserted is treated as a plain string.\r\n     */\r\n    InsertTextFormat.PlainText = 1;\r\n    /**\r\n     * The primary text to be inserted is treated as a snippet.\r\n     *\r\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\r\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\r\n     * the end of the snippet. Placeholders with equal identifiers are linked,\r\n     * that is typing in one will update others too.\r\n     *\r\n     * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md\r\n     */\r\n    InsertTextFormat.Snippet = 2;\r\n})(InsertTextFormat || (InsertTextFormat = {}));\r\n/**\r\n * The CompletionItem namespace provides functions to deal with\r\n * completion items.\r\n */\r\nexport var CompletionItem;\r\n(function (CompletionItem) {\r\n    /**\r\n     * Create a completion item and seed it with a label.\r\n     * @param label The completion item's label\r\n     */\r\n    function create(label) {\r\n        return { label: label };\r\n    }\r\n    CompletionItem.create = create;\r\n})(CompletionItem || (CompletionItem = {}));\r\n/**\r\n * The CompletionList namespace provides functions to deal with\r\n * completion lists.\r\n */\r\nexport var CompletionList;\r\n(function (CompletionList) {\r\n    /**\r\n     * Creates a new completion list.\r\n     *\r\n     * @param items The completion items.\r\n     * @param isIncomplete The list is not complete.\r\n     */\r\n    function create(items, isIncomplete) {\r\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\r\n    }\r\n    CompletionList.create = create;\r\n})(CompletionList || (CompletionList = {}));\r\nexport var MarkedString;\r\n(function (MarkedString) {\r\n    /**\r\n     * Creates a marked string from plain text.\r\n     *\r\n     * @param plainText The plain text.\r\n     */\r\n    function fromPlainText(plainText) {\r\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\r\n    }\r\n    MarkedString.fromPlainText = fromPlainText;\r\n    /**\r\n     * Checks whether the given value conforms to the [MarkedString](#MarkedString) type.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\r\n    }\r\n    MarkedString.is = is;\r\n})(MarkedString || (MarkedString = {}));\r\nexport var Hover;\r\n(function (Hover) {\r\n    /**\r\n     * Checks whether the given value conforms to the [Hover](#Hover) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\r\n            MarkedString.is(candidate.contents) ||\r\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range.is(value.range));\r\n    }\r\n    Hover.is = is;\r\n})(Hover || (Hover = {}));\r\n/**\r\n * The ParameterInformation namespace provides helper functions to work with\r\n * [ParameterInformation](#ParameterInformation) literals.\r\n */\r\nexport var ParameterInformation;\r\n(function (ParameterInformation) {\r\n    /**\r\n     * Creates a new parameter information literal.\r\n     *\r\n     * @param label A label string.\r\n     * @param documentation A doc string.\r\n     */\r\n    function create(label, documentation) {\r\n        return documentation ? { label: label, documentation: documentation } : { label: label };\r\n    }\r\n    ParameterInformation.create = create;\r\n    ;\r\n})(ParameterInformation || (ParameterInformation = {}));\r\n/**\r\n * The SignatureInformation namespace provides helper functions to work with\r\n * [SignatureInformation](#SignatureInformation) literals.\r\n */\r\nexport var SignatureInformation;\r\n(function (SignatureInformation) {\r\n    function create(label, documentation) {\r\n        var parameters = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            parameters[_i - 2] = arguments[_i];\r\n        }\r\n        var result = { label: label };\r\n        if (Is.defined(documentation)) {\r\n            result.documentation = documentation;\r\n        }\r\n        if (Is.defined(parameters)) {\r\n            result.parameters = parameters;\r\n        }\r\n        else {\r\n            result.parameters = [];\r\n        }\r\n        return result;\r\n    }\r\n    SignatureInformation.create = create;\r\n})(SignatureInformation || (SignatureInformation = {}));\r\n/**\r\n * A document highlight kind.\r\n */\r\nexport var DocumentHighlightKind;\r\n(function (DocumentHighlightKind) {\r\n    /**\r\n     * A textual occurrence.\r\n     */\r\n    DocumentHighlightKind.Text = 1;\r\n    /**\r\n     * Read-access of a symbol, like reading a variable.\r\n     */\r\n    DocumentHighlightKind.Read = 2;\r\n    /**\r\n     * Write-access of a symbol, like writing to a variable.\r\n     */\r\n    DocumentHighlightKind.Write = 3;\r\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\r\n/**\r\n * DocumentHighlight namespace to provide helper functions to work with\r\n * [DocumentHighlight](#DocumentHighlight) literals.\r\n */\r\nexport var DocumentHighlight;\r\n(function (DocumentHighlight) {\r\n    /**\r\n     * Create a DocumentHighlight object.\r\n     * @param range The range the highlight applies to.\r\n     */\r\n    function create(range, kind) {\r\n        var result = { range: range };\r\n        if (Is.number(kind)) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    DocumentHighlight.create = create;\r\n})(DocumentHighlight || (DocumentHighlight = {}));\r\n/**\r\n * A symbol kind.\r\n */\r\nexport var SymbolKind;\r\n(function (SymbolKind) {\r\n    SymbolKind.File = 1;\r\n    SymbolKind.Module = 2;\r\n    SymbolKind.Namespace = 3;\r\n    SymbolKind.Package = 4;\r\n    SymbolKind.Class = 5;\r\n    SymbolKind.Method = 6;\r\n    SymbolKind.Property = 7;\r\n    SymbolKind.Field = 8;\r\n    SymbolKind.Constructor = 9;\r\n    SymbolKind.Enum = 10;\r\n    SymbolKind.Interface = 11;\r\n    SymbolKind.Function = 12;\r\n    SymbolKind.Variable = 13;\r\n    SymbolKind.Constant = 14;\r\n    SymbolKind.String = 15;\r\n    SymbolKind.Number = 16;\r\n    SymbolKind.Boolean = 17;\r\n    SymbolKind.Array = 18;\r\n    SymbolKind.Object = 19;\r\n    SymbolKind.Key = 20;\r\n    SymbolKind.Null = 21;\r\n    SymbolKind.EnumMember = 22;\r\n    SymbolKind.Struct = 23;\r\n    SymbolKind.Event = 24;\r\n    SymbolKind.Operator = 25;\r\n    SymbolKind.TypeParameter = 26;\r\n})(SymbolKind || (SymbolKind = {}));\r\nexport var SymbolInformation;\r\n(function (SymbolInformation) {\r\n    /**\r\n     * Creates a new symbol information literal.\r\n     *\r\n     * @param name The name of the symbol.\r\n     * @param kind The kind of the symbol.\r\n     * @param range The range of the location of the symbol.\r\n     * @param uri The resource of the location of symbol, defaults to the current document.\r\n     * @param containerName The name of the symbol containing the symbol.\r\n     */\r\n    function create(name, kind, range, uri, containerName) {\r\n        var result = {\r\n            name: name,\r\n            kind: kind,\r\n            location: { uri: uri, range: range }\r\n        };\r\n        if (containerName) {\r\n            result.containerName = containerName;\r\n        }\r\n        return result;\r\n    }\r\n    SymbolInformation.create = create;\r\n})(SymbolInformation || (SymbolInformation = {}));\r\n/**\r\n * Represents programming constructs like variables, classes, interfaces etc.\r\n * that appear in a document. Document symbols can be hierarchical and they\r\n * have two ranges: one that encloses its definition and one that points to\r\n * its most interesting range, e.g. the range of an identifier.\r\n */\r\nvar DocumentSymbol = /** @class */ (function () {\r\n    function DocumentSymbol() {\r\n    }\r\n    return DocumentSymbol;\r\n}());\r\nexport { DocumentSymbol };\r\n(function (DocumentSymbol) {\r\n    /**\r\n     * Creates a new symbol information literal.\r\n     *\r\n     * @param name The name of the symbol.\r\n     * @param detail The detail of the symbol.\r\n     * @param kind The kind of the symbol.\r\n     * @param range The range of the symbol.\r\n     * @param selectionRange The selectionRange of the symbol.\r\n     * @param children Children of the symbol.\r\n     */\r\n    function create(name, detail, kind, range, selectionRange, children) {\r\n        var result = {\r\n            name: name,\r\n            detail: detail,\r\n            kind: kind,\r\n            range: range,\r\n            selectionRange: selectionRange\r\n        };\r\n        if (children !== void 0) {\r\n            result.children = children;\r\n        }\r\n        return result;\r\n    }\r\n    DocumentSymbol.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DocumentSymbol](#DocumentSymbol) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate &&\r\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\r\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\r\n            (candidate.detail === void 0 || Is.string(candidate.detail)) &&\r\n            (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) &&\r\n            (candidate.children === void 0 || Array.isArray(candidate.children));\r\n    }\r\n    DocumentSymbol.is = is;\r\n})(DocumentSymbol || (DocumentSymbol = {}));\r\n/**\r\n * A set of predefined code action kinds\r\n */\r\nexport var CodeActionKind;\r\n(function (CodeActionKind) {\r\n    /**\r\n     * Base kind for quickfix actions: 'quickfix'\r\n     */\r\n    CodeActionKind.QuickFix = 'quickfix';\r\n    /**\r\n     * Base kind for refactoring actions: 'refactor'\r\n     */\r\n    CodeActionKind.Refactor = 'refactor';\r\n    /**\r\n     * Base kind for refactoring extraction actions: 'refactor.extract'\r\n     *\r\n     * Example extract actions:\r\n     *\r\n     * - Extract method\r\n     * - Extract function\r\n     * - Extract variable\r\n     * - Extract interface from class\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorExtract = 'refactor.extract';\r\n    /**\r\n     * Base kind for refactoring inline actions: 'refactor.inline'\r\n     *\r\n     * Example inline actions:\r\n     *\r\n     * - Inline function\r\n     * - Inline variable\r\n     * - Inline constant\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorInline = 'refactor.inline';\r\n    /**\r\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\r\n     *\r\n     * Example rewrite actions:\r\n     *\r\n     * - Convert JavaScript function to class\r\n     * - Add or remove parameter\r\n     * - Encapsulate field\r\n     * - Make method static\r\n     * - Move method to base class\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\r\n    /**\r\n     * Base kind for source actions: `source`\r\n     *\r\n     * Source code actions apply to the entire file.\r\n     */\r\n    CodeActionKind.Source = 'source';\r\n    /**\r\n     * Base kind for an organize imports source action: `source.organizeImports`\r\n     */\r\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\r\n})(CodeActionKind || (CodeActionKind = {}));\r\n/**\r\n * The CodeActionContext namespace provides helper functions to work with\r\n * [CodeActionContext](#CodeActionContext) literals.\r\n */\r\nexport var CodeActionContext;\r\n(function (CodeActionContext) {\r\n    /**\r\n     * Creates a new CodeActionContext literal.\r\n     */\r\n    function create(diagnostics, only) {\r\n        var result = { diagnostics: diagnostics };\r\n        if (only !== void 0 && only !== null) {\r\n            result.only = only;\r\n        }\r\n        return result;\r\n    }\r\n    CodeActionContext.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string));\r\n    }\r\n    CodeActionContext.is = is;\r\n})(CodeActionContext || (CodeActionContext = {}));\r\nexport var CodeAction;\r\n(function (CodeAction) {\r\n    function create(title, commandOrEdit, kind) {\r\n        var result = { title: title };\r\n        if (Command.is(commandOrEdit)) {\r\n            result.command = commandOrEdit;\r\n        }\r\n        else {\r\n            result.edit = commandOrEdit;\r\n        }\r\n        if (kind !== void null) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    CodeAction.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && Is.string(candidate.title) &&\r\n            (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\r\n            (candidate.kind === void 0 || Is.string(candidate.kind)) &&\r\n            (candidate.edit !== void 0 || candidate.command !== void 0) &&\r\n            (candidate.command === void 0 || Command.is(candidate.command)) &&\r\n            (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));\r\n    }\r\n    CodeAction.is = is;\r\n})(CodeAction || (CodeAction = {}));\r\n/**\r\n * The CodeLens namespace provides helper functions to work with\r\n * [CodeLens](#CodeLens) literals.\r\n */\r\nexport var CodeLens;\r\n(function (CodeLens) {\r\n    /**\r\n     * Creates a new CodeLens literal.\r\n     */\r\n    function create(range, data) {\r\n        var result = { range: range };\r\n        if (Is.defined(data))\r\n            result.data = data;\r\n        return result;\r\n    }\r\n    CodeLens.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\r\n    }\r\n    CodeLens.is = is;\r\n})(CodeLens || (CodeLens = {}));\r\n/**\r\n * The FormattingOptions namespace provides helper functions to work with\r\n * [FormattingOptions](#FormattingOptions) literals.\r\n */\r\nexport var FormattingOptions;\r\n(function (FormattingOptions) {\r\n    /**\r\n     * Creates a new FormattingOptions literal.\r\n     */\r\n    function create(tabSize, insertSpaces) {\r\n        return { tabSize: tabSize, insertSpaces: insertSpaces };\r\n    }\r\n    FormattingOptions.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\r\n    }\r\n    FormattingOptions.is = is;\r\n})(FormattingOptions || (FormattingOptions = {}));\r\n/**\r\n * A document link is a range in a text document that links to an internal or external resource, like another\r\n * text document or a web site.\r\n */\r\nvar DocumentLink = /** @class */ (function () {\r\n    function DocumentLink() {\r\n    }\r\n    return DocumentLink;\r\n}());\r\nexport { DocumentLink };\r\n/**\r\n * The DocumentLink namespace provides helper functions to work with\r\n * [DocumentLink](#DocumentLink) literals.\r\n */\r\n(function (DocumentLink) {\r\n    /**\r\n     * Creates a new DocumentLink literal.\r\n     */\r\n    function create(range, target, data) {\r\n        return { range: range, target: target, data: data };\r\n    }\r\n    DocumentLink.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\r\n    }\r\n    DocumentLink.is = is;\r\n})(DocumentLink || (DocumentLink = {}));\r\nexport var EOL = ['\\n', '\\r\\n', '\\r'];\r\nexport var TextDocument;\r\n(function (TextDocument) {\r\n    /**\r\n     * Creates a new ITextDocument literal from the given uri and content.\r\n     * @param uri The document's uri.\r\n     * @param languageId  The document's language Id.\r\n     * @param content The document's content.\r\n     */\r\n    function create(uri, languageId, version, content) {\r\n        return new FullTextDocument(uri, languageId, version, content);\r\n    }\r\n    TextDocument.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount)\r\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\r\n    }\r\n    TextDocument.is = is;\r\n    function applyEdits(document, edits) {\r\n        var text = document.getText();\r\n        var sortedEdits = mergeSort(edits, function (a, b) {\r\n            var diff = a.range.start.line - b.range.start.line;\r\n            if (diff === 0) {\r\n                return a.range.start.character - b.range.start.character;\r\n            }\r\n            return diff;\r\n        });\r\n        var lastModifiedOffset = text.length;\r\n        for (var i = sortedEdits.length - 1; i >= 0; i--) {\r\n            var e = sortedEdits[i];\r\n            var startOffset = document.offsetAt(e.range.start);\r\n            var endOffset = document.offsetAt(e.range.end);\r\n            if (endOffset <= lastModifiedOffset) {\r\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\r\n            }\r\n            else {\r\n                throw new Error('Ovelapping edit');\r\n            }\r\n            lastModifiedOffset = startOffset;\r\n        }\r\n        return text;\r\n    }\r\n    TextDocument.applyEdits = applyEdits;\r\n    function mergeSort(data, compare) {\r\n        if (data.length <= 1) {\r\n            // sorted\r\n            return data;\r\n        }\r\n        var p = (data.length / 2) | 0;\r\n        var left = data.slice(0, p);\r\n        var right = data.slice(p);\r\n        mergeSort(left, compare);\r\n        mergeSort(right, compare);\r\n        var leftIdx = 0;\r\n        var rightIdx = 0;\r\n        var i = 0;\r\n        while (leftIdx < left.length && rightIdx < right.length) {\r\n            var ret = compare(left[leftIdx], right[rightIdx]);\r\n            if (ret <= 0) {\r\n                // smaller_equal -> take left to preserve order\r\n                data[i++] = left[leftIdx++];\r\n            }\r\n            else {\r\n                // greater -> take right\r\n                data[i++] = right[rightIdx++];\r\n            }\r\n        }\r\n        while (leftIdx < left.length) {\r\n            data[i++] = left[leftIdx++];\r\n        }\r\n        while (rightIdx < right.length) {\r\n            data[i++] = right[rightIdx++];\r\n        }\r\n        return data;\r\n    }\r\n})(TextDocument || (TextDocument = {}));\r\n/**\r\n * Represents reasons why a text document is saved.\r\n */\r\nexport var TextDocumentSaveReason;\r\n(function (TextDocumentSaveReason) {\r\n    /**\r\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\r\n     * or by an API call.\r\n     */\r\n    TextDocumentSaveReason.Manual = 1;\r\n    /**\r\n     * Automatic after a delay.\r\n     */\r\n    TextDocumentSaveReason.AfterDelay = 2;\r\n    /**\r\n     * When the editor lost focus.\r\n     */\r\n    TextDocumentSaveReason.FocusOut = 3;\r\n})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));\r\nvar FullTextDocument = /** @class */ (function () {\r\n    function FullTextDocument(uri, languageId, version, content) {\r\n        this._uri = uri;\r\n        this._languageId = languageId;\r\n        this._version = version;\r\n        this._content = content;\r\n        this._lineOffsets = null;\r\n    }\r\n    Object.defineProperty(FullTextDocument.prototype, \"uri\", {\r\n        get: function () {\r\n            return this._uri;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FullTextDocument.prototype, \"languageId\", {\r\n        get: function () {\r\n            return this._languageId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FullTextDocument.prototype, \"version\", {\r\n        get: function () {\r\n            return this._version;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FullTextDocument.prototype.getText = function (range) {\r\n        if (range) {\r\n            var start = this.offsetAt(range.start);\r\n            var end = this.offsetAt(range.end);\r\n            return this._content.substring(start, end);\r\n        }\r\n        return this._content;\r\n    };\r\n    FullTextDocument.prototype.update = function (event, version) {\r\n        this._content = event.text;\r\n        this._version = version;\r\n        this._lineOffsets = null;\r\n    };\r\n    FullTextDocument.prototype.getLineOffsets = function () {\r\n        if (this._lineOffsets === null) {\r\n            var lineOffsets = [];\r\n            var text = this._content;\r\n            var isLineStart = true;\r\n            for (var i = 0; i < text.length; i++) {\r\n                if (isLineStart) {\r\n                    lineOffsets.push(i);\r\n                    isLineStart = false;\r\n                }\r\n                var ch = text.charAt(i);\r\n                isLineStart = (ch === '\\r' || ch === '\\n');\r\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\r\n                    i++;\r\n                }\r\n            }\r\n            if (isLineStart && text.length > 0) {\r\n                lineOffsets.push(text.length);\r\n            }\r\n            this._lineOffsets = lineOffsets;\r\n        }\r\n        return this._lineOffsets;\r\n    };\r\n    FullTextDocument.prototype.positionAt = function (offset) {\r\n        offset = Math.max(Math.min(offset, this._content.length), 0);\r\n        var lineOffsets = this.getLineOffsets();\r\n        var low = 0, high = lineOffsets.length;\r\n        if (high === 0) {\r\n            return Position.create(0, offset);\r\n        }\r\n        while (low < high) {\r\n            var mid = Math.floor((low + high) / 2);\r\n            if (lineOffsets[mid] > offset) {\r\n                high = mid;\r\n            }\r\n            else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n        // low is the least x for which the line offset is larger than the current offset\r\n        // or array.length if no line offset is larger than the current offset\r\n        var line = low - 1;\r\n        return Position.create(line, offset - lineOffsets[line]);\r\n    };\r\n    FullTextDocument.prototype.offsetAt = function (position) {\r\n        var lineOffsets = this.getLineOffsets();\r\n        if (position.line >= lineOffsets.length) {\r\n            return this._content.length;\r\n        }\r\n        else if (position.line < 0) {\r\n            return 0;\r\n        }\r\n        var lineOffset = lineOffsets[position.line];\r\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\r\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\r\n    };\r\n    Object.defineProperty(FullTextDocument.prototype, \"lineCount\", {\r\n        get: function () {\r\n            return this.getLineOffsets().length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FullTextDocument;\r\n}());\r\nvar Is;\r\n(function (Is) {\r\n    var toString = Object.prototype.toString;\r\n    function defined(value) {\r\n        return typeof value !== 'undefined';\r\n    }\r\n    Is.defined = defined;\r\n    function undefined(value) {\r\n        return typeof value === 'undefined';\r\n    }\r\n    Is.undefined = undefined;\r\n    function boolean(value) {\r\n        return value === true || value === false;\r\n    }\r\n    Is.boolean = boolean;\r\n    function string(value) {\r\n        return toString.call(value) === '[object String]';\r\n    }\r\n    Is.string = string;\r\n    function number(value) {\r\n        return toString.call(value) === '[object Number]';\r\n    }\r\n    Is.number = number;\r\n    function func(value) {\r\n        return toString.call(value) === '[object Function]';\r\n    }\r\n    Is.func = func;\r\n    function objectLiteral(value) {\r\n        // Strictly speaking class instances pass this check as well. Since the LSP\r\n        // doesn't use classes we ignore this for now. If we do we need to add something\r\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\r\n        return value !== null && typeof value === 'object';\r\n    }\r\n    Is.objectLiteral = objectLiteral;\r\n    function typedArray(value, check) {\r\n        return Array.isArray(value) && value.every(check);\r\n    }\r\n    Is.typedArray = typedArray;\r\n})(Is || (Is = {}));\r\n"],"sourceRoot":""}